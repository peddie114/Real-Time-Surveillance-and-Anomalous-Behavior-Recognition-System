class CrimeSequence(Sequence):
    def __init__(self, clips_list, num_classes,
                 batch_size=2, img_size=(64,64),
                 shuffle=True):
        """
        clips_list: [(clip_files, label), (clip_files, label),]
        num_classes: (e.g.2)
        batch_size: clip
        img_size: (H,W) resize
        shuffle: epoch
        """
        self.clips_list = clips_list
        self.num_classes = num_classes
        self.batch_size = batch_size
        self.img_size = img_size
        self.shuffle = shuffle

        self.indices = np.arange(len(clips_list))
        if self.shuffle:
            np.random.shuffle(self.indices)

    def __len__(self):
        return math.ceil(len(self.clips_list) / self.batch_size)

def on_epoch_end(self):
        if self.shuffle:
            np.random.shuffle(self.indices)

    def __getitem__(self, idx):
        start_i = idx*self.batch_size
        end_i   = min((idx+1)*self.batch_size, len(self.clips_list))
        batch_indices = self.indices[start_i:end_i]

        X_batch = []
        Y_batch = []

        for i in batch_indices:
            clip_files, label = self.clips_list[i]
            frames_arr = []
            for f in clip_files:
                img = cv2.imread(f, cv2.IMREAD_COLOR)  # BGR
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = cv2.resize(img, self.img_size)
                frames_arr.append(img)

            frames_arr = np.array(frames_arr, dtype=np.float32) / 255.0

            X_batch.append(frames_arr)
            Y_batch.append(label)

        X_batch = np.array(X_batch, dtype=np.float32)  
        Y_batch = np.array(Y_batch, dtype=np.int32)

        return X_batch, Y_batch

class Crime_png:
    def _scan_crime_dataset(crime_root, label_map, clip_len=16, skip_incomplete=True, max_clips_per_class=None):
    
        clips_info = []
        for class_name, class_label in label_map.items():
            class_dir = os.path.join(crime_root, class_name)
            if not os.path.isdir(class_dir):
                print(f"[warm] can't find files: {class_dir}")
                continue

            all_pngs = sorted(glob.glob(os.path.join(class_dir, '*.png')))
            num_frames = len(all_pngs)
            print(f"讀取類別: {class_name}, frame數: {num_frames}")

            start = 0
            clips_collected = 0 
            while True:
                end = start + clip_len
                if end > num_frames:
                    if skip_incomplete:
                        break
                    else:
                        needed = end - num_frames
                        clip_files = all_pngs[start:num_frames] + [all_pngs[-1]]*needed
                else:
                    clip_files = all_pngs[start:end]

                if len(clip_files) < clip_len:
                    break

                clips_info.append((clip_files, class_label))
                clips_collected += 1
                if max_clips_per_class is not None and clips_collected >= max_clips_per_class:
                    break

                start = end

        return clips_info
    def _split_dataset(clips_info, test_size=0.2, random_state=42):
        labels = [x[1] for x in clips_info]
        labels = np.array(labels)
        train_idx, test_idx = train_test_split(
            np.arange(len(clips_info)),
            test_size=test_size,
            random_state=random_state,
            stratify=labels
        )
        train_list = [clips_info[i] for i in train_idx]
        test_list  = [clips_info[i] for i in test_idx]
        return train_list, test_list

    def load_data(crime_root,
                  label_map,
                  clip_len=16,
                  img_size=(64,64),
                  test_size=0.2,
                  skip_incomplete=True,
                  random_state=42,
                  max_clips_per_class=None):
  
        
        clips_info = Crime_png._scan_crime_dataset(crime_root, label_map, clip_len, skip_incomplete, max_clips_per_class)
        print("總 clip 數:", len(clips_info))

        
        train_list, test_list = Crime_png._split_dataset(clips_info, test_size, random_state)
        print("Train clips:", len(train_list))
        print("Test clips :", len(test_list))

        
        X_train_list = []
        Y_train_list = []
        for clip_files, label in train_list:
            frames_arr = []
            for f in clip_files:
                img = cv2.imread(f, cv2.IMREAD_COLOR)
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = cv2.resize(img, img_size)
                frames_arr.append(img)
            frames_arr = np.array(frames_arr, dtype=np.uint8) 
            X_train_list.append(frames_arr)
            Y_train_list.append(label)

        X_train = np.array(X_train_list, dtype=np.uint8)
        Y_train = np.array(Y_train_list, dtype=np.int32)

        X_test_list = []
        Y_test_list = []
        for clip_files, label in test_list:
            frames_arr = []
            for f in clip_files:
                img = cv2.imread(f, cv2.IMREAD_COLOR)
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = cv2.resize(img, img_size)
                frames_arr.append(img)
            frames_arr = np.array(frames_arr, dtype=np.uint8)
            X_test_list.append(frames_arr)
            Y_test_list.append(label)

        X_test = np.array(X_test_list, dtype=np.uint8)
        Y_test = np.array(Y_test_list, dtype=np.int32)

        print("X_train shape =", X_train.shape)
        print("Y_train shape =", Y_train.shape)
        print("X_test shape  =", X_test.shape)
        print("Y_test shape  =", Y_test.shape)
        return (X_train, Y_train), (X_test, Y_test)

    @staticmethod
    def load_sequence(crime_root,
                      label_map,
                      clip_len=16,
                      img_size=(64,64),
                      test_size=0.2,
                      skip_incomplete=True,
                      random_state=42,
                      batch_size=2,
                      shuffle=True,
                      max_clips_per_class=None):
      

        clips_info = Crime_png._scan_crime_dataset(crime_root, label_map, clip_len, skip_incomplete, max_clips_per_class)
        print("總 clip 數:", len(clips_info))


        train_list, test_list = Crime_png._split_dataset(clips_info, test_size, random_state)
        print("Train clips:", len(train_list))
        print("Test clips :", len(test_list))


        num_classes = len(label_map)
        train_seq = CrimeSequence(train_list, num_classes,
                                  batch_size=batch_size,
                                  img_size=img_size,
                                  shuffle=shuffle)
        test_seq  = CrimeSequence(test_list, num_classes,
                                  batch_size=batch_size,
                                  img_size=img_size,
                                  shuffle=False)

        return train_seq, test_seq






        
